Introduction to Go and TDD
A short workshop
12 Oct 2019
Tags: golang, tdd, testing, unicode

Luciano Ramalho
Principal Consutant, ThoughtWorks
luciano.ramalho@thoughtworks.com
https://standupdev.com/
@ramalhoorg

* Iterators in Go

As of 2020, Go does not provide a way to implement user-defined iterators supported by the `for` `…` `range` syntax. Here are some ways to implement iterators.

- Implement the classic iterator pattern

- Implement an interface similar to [[https://golang.org/pkg/text/scanner/][text/scanner]].

- Implement https://github.com/googleapis/google-cloud-go/wiki/Iterator-Guidelines (https://pkg.go.dev/google.golang.org/api/iterator)

- Implement a function that spawns a coroutine to send items one by one through a channel, return that channel . Client code reads the channel using clean `for` `…` `range` syntax. This implementation is simpler. However, there is a context switch cost to run a coroutine, and the coroutine may _leak_ if it does not run to completion.

* Classic iterator

A minimal interface for the classic iterator has two methods:

- `HasNext`: advances cursor, returns `false` when there are no more items. 

- `Next`: returns the next item. 

Client code uses the iterator like this:

    iterator := MyIterator(iterable)
    for iterator.HasNext() {
        value := iterator.Next()
        doSomethingWith(value)
    }

[[https://golang.org/pkg/bufio/#Scanner][bufio/Scanner]] implements the classic iterator, using different method names: 

    scanner := bufio.NewScanner(os.Stdin)
    for scanner.Scan() {
        fmt.Println(scanner.Text())
    }

* Iterator implementations compared

.image iterators/iterators-compared.png 500 _

Source: `github.com/standupdev/runes2019/extra/iterators/...`

* Use of a channel-based iterator

Here is a test for a simple `PositiveIterator` that takes a slice of numbers and generates the positive, non-zero items in it, one by one:

.code -numbers iterators/channel-iter/iterator_test.go /^func Example/,/^}/

* Code for a channel-based iterator

.code iterators/channel-iter/iterator.go






