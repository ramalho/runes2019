Introduction to Go and TDD
Chapter 3
03 Aug 2020
Tags: golang, tdd, testing, unicode

Luciano Ramalho
Principal Consultant, ThoughtWorks
luciano.ramalho@thoughtworks.com
https://standupdev.com/
@ramalhoorg

* Searching by name

* Baby step 1: starting a table test

Up next is the `search` function, which takes two arguments: a `[]CharName` and one or more words. The return will be a new `[]CharName` containing only the items where every word given appears in the `.Name` field. First test for `search`:

.code -numbers 03/runes031/main_test.go /^func Test_search/,/^}/

* Baby step 1: minimal implementation

Make `search` return a hard-coded empty slice:

.code -numbers 03/runes031/main.go /^func search/,/^}/

* Baby step 2: queries with a single word matching whole name

.code -numbers 03/runes032/main_test.go /^func Test_search/,/^}/

* Baby step 2: consider only the first word passed:

.code -numbers 03/runes032/main.go /^func search/,/^}/

* Baby step 3: queries with a single word matching word in name

.code -numbers 03/runes033/main_test.go /^func Test_search/,/^}/

* Baby step 3: match substing

.code -numbers 03/runes033/main.go /^func search/,/^}/

* Handling whole words

* A problematic test

.code -numbers 03/runes034/main_test.go /^func Test_search/,/^}/


* End of chapter 3 ðŸŽ‰ðŸŽ‰ðŸŽ‰